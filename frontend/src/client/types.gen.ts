// This file is auto-generated by @hey-api/openapi-ts

export type CountryItem = {
  id: number;
  name: string;
  iso2: string | null;
  iso3: string | null;
  status: string | null;
  continent: string | null;
  region: string | null;
  parent_id: number | null;
  svg_url: string | null;
};

export type CountryRead = {
  id: number;
  name: string;
  iso2: string | null;
  iso3: string | null;
  status: string | null;
  continent: string | null;
  region: string | null;
  parent_id: number | null;
  svg_url: string | null;
};

export type GameCreate = {
  user_client_uuid: string;
};

export type GameRead = {
  id: number;
  user_client_id: number;
  answer_country_id: number;
  status: GameStatus;
  answer_country: CountryItem;
  guesses: Array<GuessRead>;
};

export type GameStatus = "in_progress" | "abandoned" | "won" | "lost";

export const GameStatus = {
  IN_PROGRESS: "in_progress",
  ABANDONED: "abandoned",
  WON: "won",
  LOST: "lost",
} as const;

export type GuessCreate = {
  guessed_country_id: number;
};

export type GuessRead = {
  id: number;
  guessed_country_id: number;
  guessed_country: CountryItem;
  index: number;
  game: GameRead;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type UserClientRead = {
  uuid: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ListCountriesResponse = Array<CountryItem>;

export type ListCountriesError = unknown;

export type ReadCountryData = {
  path: {
    country_id: number;
  };
};

export type ReadCountryResponse = CountryRead;

export type ReadCountryError = HTTPValidationError;

export type CreateUserClientResponse = UserClientRead;

export type CreateUserClientError = unknown;

export type ReadUserClientData = {
  path: {
    user_client_uuid: string;
  };
};

export type ReadUserClientResponse = UserClientRead;

export type ReadUserClientError = HTTPValidationError;

export type ReadCurrentGameData = {
  path: {
    user_client_uuid: string;
  };
};

export type ReadCurrentGameResponse = GameRead | null;

export type ReadCurrentGameError = HTTPValidationError;

export type CreateGameData = {
  body: GameCreate;
};

export type CreateGameResponse = GameRead;

export type CreateGameError = HTTPValidationError;

export type ReadGameData = {
  path: {
    game_id: number;
  };
};

export type ReadGameResponse = GameRead;

export type ReadGameError = HTTPValidationError;

export type CreateGuessData = {
  body: GuessCreate;
  path: {
    game_id: number;
  };
};

export type CreateGuessResponse = GuessRead;

export type CreateGuessError = HTTPValidationError;

export type CreateGameResponseTransformer = (
  data: any,
) => Promise<CreateGameResponse>;

export type GameReadModelResponseTransformer = (data: any) => GameRead;

export type GuessReadModelResponseTransformer = (data: any) => GuessRead;

export const GuessReadModelResponseTransformer: GuessReadModelResponseTransformer =
  (data) => {
    if (data?.game) {
      GameReadModelResponseTransformer(data.game);
    }
    return data;
  };

export const GameReadModelResponseTransformer: GameReadModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.guesses)) {
      data.guesses.forEach(GuessReadModelResponseTransformer);
    }
    return data;
  };

export const CreateGameResponseTransformer: CreateGameResponseTransformer =
  async (data) => {
    GameReadModelResponseTransformer(data);
    return data;
  };

export type ReadGameResponseTransformer = (
  data: any,
) => Promise<ReadGameResponse>;

export const ReadGameResponseTransformer: ReadGameResponseTransformer = async (
  data,
) => {
  GameReadModelResponseTransformer(data);
  return data;
};

export type CreateGuessResponseTransformer = (
  data: any,
) => Promise<CreateGuessResponse>;

export const CreateGuessResponseTransformer: CreateGuessResponseTransformer =
  async (data) => {
    GuessReadModelResponseTransformer(data);
    return data;
  };
