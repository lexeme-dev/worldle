// This file is auto-generated by @hey-api/openapi-ts

export type CompassDirection =
  | "NORTH"
  | "NORTH_EAST"
  | "EAST"
  | "SOUTH_EAST"
  | "SOUTH"
  | "SOUTH_WEST"
  | "WEST"
  | "NORTH_WEST";

export const CompassDirection = {
  NORTH: "NORTH",
  NORTH_EAST: "NORTH_EAST",
  EAST: "EAST",
  SOUTH_EAST: "SOUTH_EAST",
  SOUTH: "SOUTH",
  SOUTH_WEST: "SOUTH_WEST",
  WEST: "WEST",
  NORTH_WEST: "NORTH_WEST",
} as const;

export type CountryItem = {
  id: number;
  name: string;
  iso2: string | null;
  iso3: string | null;
  status: string | null;
  continent: string | null;
  region: string | null;
  parent_id: number | null;
  svg_url: string | null;
};

export type CountryRead = {
  id: number;
  name: string;
  iso2: string | null;
  iso3: string | null;
  status: string | null;
  continent: string | null;
  region: string | null;
  parent_id: number | null;
  svg_url: string | null;
};

export type GameCreate = {
  user_client_uuid: string;
};

export type GameRead = {
  id: number;
  user_client_id: number;
  answer_country_id: number;
  status: GameStatus;
  answer_country: CountryItem;
  guesses: Array<GuessItem>;
};

export type GameStatus = "in_progress" | "abandoned" | "won" | "lost";

export const GameStatus = {
  IN_PROGRESS: "in_progress",
  ABANDONED: "abandoned",
  WON: "won",
  LOST: "lost",
} as const;

export type GuessCreate = {
  guessed_country_id: number;
};

export type GuessItem = {
  id: number;
  guessed_country_id: number;
  guessed_country: CountryItem;
  index: number;
  is_correct: boolean;
  distance_to_answer_miles: number;
  bearing_to_answer: number;
  compass_direction_to_answer: CompassDirection;
  proximity_prop: number;
};

export type GuessRead = {
  id: number;
  guessed_country_id: number;
  guessed_country: CountryItem;
  index: number;
  is_correct: boolean;
  distance_to_answer_miles: number;
  bearing_to_answer: number;
  compass_direction_to_answer: CompassDirection;
  proximity_prop: number;
  game: GameRead;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type UserClientRead = {
  uuid: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ListCountriesResponse = Array<CountryItem>;

export type ListCountriesError = unknown;

export type ReadCountryData = {
  path: {
    country_id: number;
  };
};

export type ReadCountryResponse = CountryRead;

export type ReadCountryError = HTTPValidationError;

export type CreateUserClientResponse = UserClientRead;

export type CreateUserClientError = unknown;

export type ReadUserClientData = {
  path: {
    user_client_uuid: string;
  };
};

export type ReadUserClientResponse = UserClientRead;

export type ReadUserClientError = HTTPValidationError;

export type ReadCurrentGameData = {
  path: {
    user_client_uuid: string;
  };
};

export type ReadCurrentGameResponse = GameRead | null;

export type ReadCurrentGameError = HTTPValidationError;

export type CreateGameData = {
  body: GameCreate;
};

export type CreateGameResponse = GameRead;

export type CreateGameError = HTTPValidationError;

export type ReadGameData = {
  path: {
    game_id: number;
  };
};

export type ReadGameResponse = GameRead;

export type ReadGameError = HTTPValidationError;

export type CreateGuessData = {
  body: GuessCreate;
  path: {
    game_id: number;
  };
};

export type CreateGuessResponse = GuessRead;

export type CreateGuessError = HTTPValidationError;
