// @ts-nocheck
// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { type UseMutationOptions, queryOptions } from "@tanstack/react-query";
import { DefaultService, client } from "../services.gen";
import type {
  CreateGameData,
  CreateGameError,
  CreateGameResponse,
  CreateGuessData,
  CreateGuessError,
  CreateGuessResponse,
  CreateUserClientError,
  CreateUserClientResponse,
  ReadCountryData,
  ReadCurrentGameData,
  ReadGameData,
  ReadUserClientData,
} from "../types.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const listCountriesQueryKey = (options?: Options) => [
  createQueryKey("listCountries", options),
];

export const listCountriesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.listCountries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listCountriesQueryKey(options),
  });
};

export const readCountryQueryKey = (options: Options<ReadCountryData>) => [
  createQueryKey("readCountry", options),
];

export const readCountryOptions = (options: Options<ReadCountryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.readCountry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readCountryQueryKey(options),
  });
};

export const createUserClientQueryKey = (options?: Options) => [
  createQueryKey("createUserClient", options),
];

export const createUserClientOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.createUserClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createUserClientQueryKey(options),
  });
};

export const createUserClientMutation = (options?: Partial<Options>) => {
  const mutationOptions: UseMutationOptions<
    CreateUserClientResponse,
    CreateUserClientError,
    Options
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DefaultService.createUserClient({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readUserClientQueryKey = (
  options: Options<ReadUserClientData>,
) => [createQueryKey("readUserClient", options)];

export const readUserClientOptions = (options: Options<ReadUserClientData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.readUserClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readUserClientQueryKey(options),
  });
};

export const readCurrentGameQueryKey = (
  options: Options<ReadCurrentGameData>,
) => [createQueryKey("readCurrentGame", options)];

export const readCurrentGameOptions = (
  options: Options<ReadCurrentGameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.readCurrentGame({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readCurrentGameQueryKey(options),
  });
};

export const createGameQueryKey = (options: Options<CreateGameData>) => [
  createQueryKey("createGame", options),
];

export const createGameOptions = (options: Options<CreateGameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.createGame({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createGameQueryKey(options),
  });
};

export const createGameMutation = (
  options?: Partial<Options<CreateGameData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateGameResponse,
    CreateGameError,
    Options<CreateGameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DefaultService.createGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readGameQueryKey = (options: Options<ReadGameData>) => [
  createQueryKey("readGame", options),
];

export const readGameOptions = (options: Options<ReadGameData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.readGame({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readGameQueryKey(options),
  });
};

export const createGuessQueryKey = (options: Options<CreateGuessData>) => [
  createQueryKey("createGuess", options),
];

export const createGuessOptions = (options: Options<CreateGuessData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DefaultService.createGuess({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createGuessQueryKey(options),
  });
};

export const createGuessMutation = (
  options?: Partial<Options<CreateGuessData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateGuessResponse,
    CreateGuessError,
    Options<CreateGuessData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DefaultService.createGuess({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
